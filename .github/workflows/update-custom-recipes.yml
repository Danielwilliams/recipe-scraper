name: Update Recipe Database

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'list'
        type: choice
        options:
          - list
          - search
          - update_image
          - update_title
          - update_complexity
          - batch_update
          - update_from_file
      recipe_id:
        description: 'Recipe ID (for single-recipe operations)'
        required: false
        type: string
      new_value:
        description: 'New value (for update operations)'
        required: false
        type: string
      search_term:
        description: 'Search term (for search operation)'
        required: false
        type: string
      csv_path:
        description: 'Path to CSV file (for batch update)'
        required: false
        default: 'updates/image_updates.csv'
        type: string

jobs:
  update_recipes:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary python-dotenv requests
      
      - name: Create batch update CSV if needed
        if: ${{ github.event.inputs.operation == 'batch_update' }}
        run: |
          mkdir -p updates
          # Check if the CSV file already exists in the repo
          if [ ! -f "${{ github.event.inputs.csv_path }}" ]; then
            # Create an empty CSV as a placeholder
            echo "# recipe_id,new_image_url" > ${{ github.event.inputs.csv_path }}
            echo "# Add your entries below this line" >> ${{ github.event.inputs.csv_path }}
          fi
      
      - name: Create runner script
        run: |
          cat > run_recipe_operation.py <<EOL
          import sys
          import os
          import json
          import psycopg2
          from psycopg2.extras import RealDictCursor
          import re
          from update_recipes import (
              get_db_connection,
              list_recipes, 
              update_recipe_image, 
              update_recipe_title, 
              update_recipe_complexity,
              batch_update_image_urls
          )

          def update_or_create_recipe_from_file(file_path):
              """Update existing recipes or create new ones from a text file"""
              
              if not os.path.exists(file_path):
                  print(f"File not found: {file_path}")
                  return False
                  
              try:
                  with open(file_path, 'r') as f:
                      recipes_text = f.read()
                      
                  # Split the text into recipe sections (assuming blank lines separate recipes)
                  recipes = re.split(r'\n\s*\n', recipes_text)
                  
                  conn = get_db_connection()
                  success_count = 0
                  
                  for recipe_text in recipes:
                      if not recipe_text.strip():
                          continue
                          
                      try:
                          # Parse recipe details
                          # Assuming format: Title on first line, other details following
                          lines = recipe_text.strip().split('\\n')
                          if not lines:
                              continue
                              
                          title = lines[0].strip()
                          
                          # Look for image URL, source, and complexity in the text
                          image_url = None
                          source = "custom"
                          complexity = "medium"
                          instructions = []
                          
                          for line in lines[1:]:
                              line = line.strip()
                              if not line:
                                  continue
                                  
                              if line.lower().startswith("image:"):
                                  image_url = line.split(":", 1)[1].strip()
                              elif line.lower().startswith("source:"):
                                  source = line.split(":", 1)[1].strip()
                              elif line.lower().startswith("complexity:"):
                                  complexity_val = line.split(":", 1)[1].strip().lower()
                                  if complexity_val in ["easy", "medium", "complex"]:
                                      complexity = complexity_val
                              elif line.lower().startswith("instructions:"):
                                  pass  # Just a header, skip
                              else:
                                  # Assume this is an instruction step
                                  instructions.append(line)
                          
                          # First check if recipe with this title exists
                          with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                              cursor.execute("""
                                  SELECT id FROM scraped_recipes WHERE LOWER(title) = LOWER(%s)
                              """, (title,))
                              
                              existing = cursor.fetchone()
                              
                              if existing:
                                  # Update existing recipe
                                  recipe_id = existing['id']
                                  print(f"Updating existing recipe: {title} (ID: {recipe_id})")
                                  
                                  update_fields = []
                                  params = []
                                  
                                  if image_url:
                                      update_fields.append("image_url = %s")
                                      params.append(image_url)
                                      
                                  if source:
                                      update_fields.append("source = %s")
                                      params.append(source)
                                      
                                  if complexity:
                                      update_fields.append("complexity = %s")
                                      params.append(complexity)
                                      
                                  if instructions:
                                      update_fields.append("instructions = %s")
                                      params.append(json.dumps(instructions))
                                  
                                  if update_fields:
                                      params.append(recipe_id)
                                      cursor.execute(f"""
                                          UPDATE scraped_recipes
                                          SET {', '.join(update_fields)}
                                          WHERE id = %s
                                      """, params)
                                      
                                      conn.commit()
                                      print(f"Updated recipe: {title}")
                                      success_count += 1
                              else:
                                  # Create new recipe
                                  print(f"Creating new recipe: {title}")
                                  
                                  cursor.execute("""
                                      INSERT INTO scraped_recipes
                                      (title, image_url, source, complexity, instructions, date_scraped)
                                      VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP)
                                      RETURNING id
                                  """, (
                                      title,
                                      image_url,
                                      source,
                                      complexity,
                                      json.dumps(instructions) if instructions else None
                                  ))
                                  
                                  new_id = cursor.fetchone()['id']
                                  conn.commit()
                                  print(f"Created new recipe with ID: {new_id}")
                                  success_count += 1
                      except Exception as e:
                          print(f"Error processing recipe '{title if 'title' in locals() else 'unknown'}': {str(e)}")
                          conn.rollback()
                  
                  print(f"Successfully processed {success_count} recipes out of {len(recipes)}")
                  return True
              except Exception as e:
                  print(f"Error reading or processing recipes file: {str(e)}")
                  return False
              finally:
                  if 'conn' in locals():
                      conn.close()

          operation = sys.argv[1]
          
          if operation == 'list':
              list_recipes(limit=20, offset=0)
          
          elif operation == 'search':
              search_term = sys.argv[2] if len(sys.argv) > 2 else None
              if search_term:
                  list_recipes(search_term=search_term)
              else:
                  print("No search term provided")
          
          elif operation == 'update_image':
              recipe_id = int(sys.argv[2])
              new_image_url = sys.argv[3]
              update_recipe_image(recipe_id, new_image_url)
          
          elif operation == 'update_title':
              recipe_id = int(sys.argv[2])
              new_title = sys.argv[3]
              update_recipe_title(recipe_id, new_title)
          
          elif operation == 'update_complexity':
              recipe_id = int(sys.argv[2])
              new_complexity = sys.argv[3]
              if new_complexity not in ['easy', 'medium', 'complex']:
                  print("Complexity must be one of: easy, medium, complex")
                  sys.exit(1)
              update_recipe_complexity(recipe_id, new_complexity)
          
          elif operation == 'batch_update':
              csv_path = sys.argv[2]
              batch_update_image_urls(csv_path)
              
          elif operation == 'update_from_file':
              file_path = sys.argv[2]
              update_or_create_recipe_from_file(file_path)
          
          else:
              print(f"Unknown operation: {operation}")
              sys.exit(1)
          EOL
      
      - name: Create .env file
        run: |
          cat > .env <<EOL
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOL
      
      - name: Run recipe operation
        run: |
          echo "Running operation: ${{ github.event.inputs.operation }}"
          
          case "${{ github.event.inputs.operation }}" in
            "list")
              python run_recipe_operation.py list
              ;;
            "search")
              python run_recipe_operation.py search "${{ github.event.inputs.search_term }}"
              ;;
            "update_image")
              python run_recipe_operation.py update_image "${{ github.event.inputs.recipe_id }}" "${{ github.event.inputs.new_value }}"
              ;;
            "update_title")
              python run_recipe_operation.py update_title "${{ github.event.inputs.recipe_id }}" "${{ github.event.inputs.new_value }}"
              ;;
            "update_complexity")
              python run_recipe_operation.py update_complexity "${{ github.event.inputs.recipe_id }}" "${{ github.event.inputs.new_value }}"
              ;;
            "batch_update")
              python run_recipe_operation.py batch_update "${{ github.event.inputs.csv_path }}"
              ;;
            "update_from_file")
              python run_recipe_operation.py update_from_file "custom_recipes.txt"
              ;;
            *)
              echo "Unknown operation: ${{ github.event.inputs.operation }}"
              exit 1
              ;;
          esac