name: Update Custom Recipes Direct

on:
  workflow_dispatch:

jobs:
  update_recipes:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary python-dotenv
      
      - name: Create .env file
        run: |
          cat > .env <<EOL
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOL
      
      - name: List directory structure
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          
          # Display data directory content
          echo "Data directory content:"
          find data -type f -name "*.txt" | sort
          cat data/foodnetwork_data/Custom_Recipes.txt | head -20
      
      - name: Import custom recipes
        run: |
          # Create a simple script to update recipes
          cat > update_script.py <<'EOL'
          #!/usr/bin/env python3
          
          import json
          import os
          import re
          import sys
          from dotenv import load_dotenv
          import psycopg2
          from psycopg2.extras import RealDictCursor
          
          # Load environment variables
          load_dotenv()
          
          def get_db_connection():
              """Create and return a database connection"""
              database_url = os.environ.get('DATABASE_URL')
              if database_url:
                  conn = psycopg2.connect(database_url)
                  return conn
              
              conn = psycopg2.connect(
                  dbname=os.environ.get('DB_NAME'),
                  user=os.environ.get('DB_USER'),
                  password=os.environ.get('DB_PASSWORD'),
                  host=os.environ.get('DB_HOST'),
                  port=os.environ.get('DB_PORT', '5432')
              )
              return conn
          
          def process_recipes_file(file_path):
              """Process recipes from file and update database"""
              print(f"Looking for file at: {file_path}")
              
              if not os.path.exists(file_path):
                  print(f"File not found: {file_path}")
                  # Try to find it
                  for root, dirs, files in os.walk('.'):
                      for file in files:
                          if file == "Custom_Recipes.txt":
                              possible_path = os.path.join(root, file)
                              print(f"Found potential file at: {possible_path}")
                              file_path = possible_path
                              break
                  if not os.path.exists(file_path):
                      print("Could not find Custom_Recipes.txt anywhere")
                      return False
              
              print(f"Reading file: {file_path}")
              with open(file_path, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              print(f"File size: {len(content)} bytes")
              
              # Split by separator lines
              recipes = re.split(r'-{10,}', content)
              print(f"Found {len(recipes)} potential recipe sections")
              
              # Connect to database
              conn = get_db_connection()
              cursor = conn.cursor(cursor_factory=RealDictCursor)
              
              updated = 0
              created = 0
              
              for i, recipe_text in enumerate(recipes):
                  if not recipe_text.strip():
                      continue
                  
                  # Extract basic recipe info
                  lines = recipe_text.strip().split('\n')
                  if not lines:
                      continue
                  
                  title = lines[0].strip()
                  if not title:
                      continue
                  
                  print(f"Processing recipe: {title}")
                  
                  # Extract image URL
                  image_url = None
                  for line in lines:
                      if line.strip().startswith("Image Link:"):
                          image_url = line.replace("Image Link:", "").strip()
                          break
                  
                  if not image_url:
                      print(f"No image URL found for recipe: {title}")
                      continue
                  
                  # Check if recipe exists
                  cursor.execute("SELECT id FROM scraped_recipes WHERE LOWER(title) = LOWER(%s)", (title,))
                  result = cursor.fetchone()
                  
                  if result:
                      # Update existing recipe
                      recipe_id = result['id']
                      print(f"Updating existing recipe: {title} (ID: {recipe_id})")
                      
                      cursor.execute(
                          "UPDATE scraped_recipes SET image_url = %s WHERE id = %s",
                          (image_url, recipe_id)
                      )
                      updated += 1
                  else:
                      # Create new recipe (simplified version)
                      print(f"Creating new recipe: {title}")
                      cursor.execute(
                          """INSERT INTO scraped_recipes 
                             (title, image_url, source, complexity, date_scraped) 
                             VALUES (%s, %s, %s, %s, CURRENT_TIMESTAMP)""",
                          (title, image_url, 'custom', 'medium')
                      )
                      created += 1
              
              conn.commit()
              cursor.close()
              conn.close()
              
              print(f"Processing complete. Updated: {updated}, Created: {created}")
              return True
          
          if __name__ == "__main__":
              file_path = "data/foodnetwork_data/Custom_Recipes.txt"
              if len(sys.argv) > 1:
                  file_path = sys.argv[1]
              
              process_recipes_file(file_path)
          EOL
          
          # Make the script executable
          chmod +x update_script.py
          
          # Run the script
          python update_script.py data/foodnetwork_data/Custom_Recipes.txt